package a.com.me.obo.greendaooldversion;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import a.com.me.obo.greendaooldversion.ImpressionEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table IMPRESSION_ENTITY.
*/
public class ImpressionEntityDao extends AbstractDao<ImpressionEntity, Long> {

    public static final String TABLENAME = "IMPRESSION_ENTITY";

    /**
     * Properties of entity ImpressionEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AdType = new Property(1, Integer.class, "adType", false, "AD_TYPE");
        public final static Property OfferId = new Property(2, String.class, "offerId", false, "OFFER_ID");
        public final static Property Md5Name = new Property(3, String.class, "md5Name", false, "MD5_NAME");
        public final static Property Impression = new Property(4, Integer.class, "impression", false, "IMPRESSION");
        public final static Property Click = new Property(5, Integer.class, "click", false, "CLICK");
        public final static Property AdPostion = new Property(6, Integer.class, "adPostion", false, "AD_POSTION");
        public final static Property AppID = new Property(7, String.class, "appID", false, "APP_ID");
        public final static Property PlacementID = new Property(8, String.class, "placementID", false, "PLACEMENT_ID");
        public final static Property OfferName = new Property(9, String.class, "offerName", false, "OFFER_NAME");
        public final static Property TimeLastUpdate = new Property(10, Long.class, "timeLastUpdate", false, "TIME_LAST_UPDATE");
    };


    public ImpressionEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ImpressionEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'IMPRESSION_ENTITY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'AD_TYPE' INTEGER," + // 1: adType
                "'OFFER_ID' TEXT," + // 2: offerId
                "'MD5_NAME' TEXT," + // 3: md5Name
                "'IMPRESSION' INTEGER," + // 4: impression
                "'CLICK' INTEGER," + // 5: click
                "'AD_POSTION' INTEGER," + // 6: adPostion
                "'APP_ID' TEXT," + // 7: appID
                "'PLACEMENT_ID' TEXT," + // 8: placementID
                "'OFFER_NAME' TEXT," + // 9: offerName
                "'TIME_LAST_UPDATE' INTEGER);"); // 10: timeLastUpdate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'IMPRESSION_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ImpressionEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer adType = entity.getAdType();
        if (adType != null) {
            stmt.bindLong(2, adType);
        }
 
        String offerId = entity.getOfferId();
        if (offerId != null) {
            stmt.bindString(3, offerId);
        }
 
        String md5Name = entity.getMd5Name();
        if (md5Name != null) {
            stmt.bindString(4, md5Name);
        }
 
        Integer impression = entity.getImpression();
        if (impression != null) {
            stmt.bindLong(5, impression);
        }
 
        Integer click = entity.getClick();
        if (click != null) {
            stmt.bindLong(6, click);
        }
 
        Integer adPostion = entity.getAdPostion();
        if (adPostion != null) {
            stmt.bindLong(7, adPostion);
        }
 
        String appID = entity.getAppID();
        if (appID != null) {
            stmt.bindString(8, appID);
        }
 
        String placementID = entity.getPlacementID();
        if (placementID != null) {
            stmt.bindString(9, placementID);
        }
 
        String offerName = entity.getOfferName();
        if (offerName != null) {
            stmt.bindString(10, offerName);
        }
 
        Long timeLastUpdate = entity.getTimeLastUpdate();
        if (timeLastUpdate != null) {
            stmt.bindLong(11, timeLastUpdate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ImpressionEntity readEntity(Cursor cursor, int offset) {
        ImpressionEntity entity = new ImpressionEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // adType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // offerId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // md5Name
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // impression
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // click
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // adPostion
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // appID
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // placementID
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // offerName
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // timeLastUpdate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ImpressionEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAdType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setOfferId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMd5Name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImpression(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setClick(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setAdPostion(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setAppID(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPlacementID(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOfferName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTimeLastUpdate(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ImpressionEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ImpressionEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
